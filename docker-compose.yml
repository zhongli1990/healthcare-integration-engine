version: '3.8'

services:
  # Integration Engine Service
  integration-engine:
    build:
      context: .
      dockerfile: integration_engine/Dockerfile
      target: production
    container_name: healthcare-integration-engine
    restart: unless-stopped
    ports:
      - "8000:8000"  # API
      - "2575:2575"  # HL7 MLLP
      - "8080:8080"  # FHIR API
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - REDIS_URL=redis://redis:6379/0
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=healthcare123
      # File paths
      - INPUT_DIR=/data/inputs
      - OUTPUT_DIR=/data/outputs
      - PROCESSED_DIR=/data/processed
      - ERROR_DIR=/data/errors
    volumes:
      - integration_data:/data
      - ./integration_engine:/app/integration_engine:cached
      - ./config:/app/config:ro
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app-network
    
  # Integration Engine Test Runner
  test-integration-engine:
    build:
      context: .
      dockerfile: integration_engine/Dockerfile.test
      target: test
    container_name: test-integration-engine
    depends_on:
      redis:
        condition: service_healthy
      integration-engine:
        condition: service_healthy
    environment:
      - ENVIRONMENT=test
      - LOG_LEVEL=DEBUG
      - REDIS_URL=redis://redis:6379/0
      - TEST_DATA_DIR=/app/test_data
    volumes:
      - ./integration_engine:/app
      - ./test_data:/app/test_data
      - ./config:/app/config:ro
    networks:
      - app-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - app-network
    depends_on:
      - redis
      - integration-engine

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - app-network
    depends_on:
      - prometheus
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: healthcare-integration-backend
    restart: always
    ports:
      - "8850:8850"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/healthcare_integration
      - TEST_DATABASE_URL=postgresql://postgres:postgres@db:5432/healthcare_integration?options=-c%20search_path%3Dtest_schema
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=healthcare123
      - SENTRY_DSN=${SENTRY_DSN}
      - HL7_WATCH_DIR=/app/data/hl7/incoming
      - HL7_PROCESSED_DIR=/app/data/hl7/processed
      - HL7_ERROR_DIR=/app/data/hl7/errors
    volumes:
      - ./backend:/app
      - hl7_data:/app/data/hl7
      - ./backend/.env:/app/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      neo4j:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8850/api/v1/health/health"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 30s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: healthcare-integration-frontend
    restart: unless-stopped
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8850/api/v1  # For local development
      # - VITE_API_URL=http://backend:8850/api/v1  # For container-to-container communication
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/dist
    working_dir: /app
    networks:
      - app-network
    stdin_open: true
    tty: true

  db:
    image: postgres:15-alpine
    container_name: healthcare-integration-db
    restart: always
    environment:
      - POSTGRES_DB=healthcare_integration
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST_AUTH_METHOD=trust  # Allow all connections without password for initialization
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/docker/postgres/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
    ports:
      - "8852:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d healthcare_integration"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: healthcare-integration-redis
    restart: always
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "8853:6379"
    networks:
      - app-network

  neo4j:
    image: neo4j:5.13.0-community
    container_name: healthcare-neo4j
    environment:
      - NEO4J_AUTH=neo4j/healthcare123
      - NEO4J_PLUGINS='["apoc"]'
      - NEO4J_dbms_memory_pagecache_size=512M
      - NEO4J_server_memory_heap_initial__size=512M
      - NEO4J_server_memory_heap_max__size=1G
      - NEO4J_dbms_memory_heap_initial__size=512M
      - NEO4J_dbms_memory_heap_max__size=1G
      - NEO4J_dbms_connector_bolt_listen__address=0.0.0.0:7687
      - NEO4J_dbms_connector_http_listen__address=0.0.0.0:7474
    ports:
      - "7474:7474"  # Browser UI
      - "7687:7687"  # Bolt protocol
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:7474"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - app-network

  iris-import:
    build:
      context: .
      dockerfile: services/iris_import/Dockerfile
    container_name: healthcare-integration-iris-import
    restart: unless-stopped
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=healthcare123
      - PYTHONPATH=/app
      - UPLOAD_DIR=/app/uploads
      - PYTHONUNBUFFERED=1
    ports:
      - "8001:8000"
    volumes:
      - ./services/iris_import/app:/app/app
      - iris_import_uploads:/app/uploads
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

volumes:
  postgres_data:
  redis_data:
  hl7_data:
  neo4j_data:
  neo4j_logs:
  iris_import_uploads:
  prometheus-data:
  grafana-storage:

networks:
  app-network:
    driver: bridge
